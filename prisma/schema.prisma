// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String?
  name      String?
  phone     String?
  image     String?
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  emailVerified DateTime?

  addresses       Address[]
  carts           Cart[]
  orders          Order[]
  reviews         Review[]
  wishlist        Wishlist[]
  accounts        Account[]
  sessions        Session[]
  loyaltyAccount  LoyaltyAccount?
  pointsHistory   LoyaltyTransaction[]
  vendor          Vendor?
  messages        Message[]
}

enum Role {
  USER
  ADMIN
  VENDOR
}

// Vendor/Seller model
model Vendor {
  id              String    @id @default(cuid())
  userId          String    @unique
  businessName    String
  businessEmail   String    @unique
  businessPhone   String?
  description     String?   @db.Text
  logo            String?
  banner          String?
  address         String?
  city            String?
  country         String?
  taxId           String?
  status          VendorStatus @default(PENDING)
  commission      Float     @default(15.0) // Platform commission percentage
  rating          Float?
  totalSales      Float     @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products        Product[]
  orders          Order[]
  payouts         VendorPayout[]
}

enum VendorStatus {
  PENDING
  APPROVED
  SUSPENDED
  REJECTED
}

model VendorPayout {
  id          String        @id @default(cuid())
  vendorId    String
  amount      Float
  status      PayoutStatus  @default(PENDING)
  method      String?
  reference   String?
  createdAt   DateTime      @default(now())
  processedAt DateTime?

  vendor      Vendor        @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Currency model
model Currency {
  id          String   @id @default(cuid())
  code        String   @unique // USD, EUR, GBP, etc.
  name        String
  symbol      String
  rate        Float    @default(1.0) // Exchange rate relative to base currency (USD)
  isActive    Boolean  @default(true)
  updatedAt   DateTime @updatedAt
}

// User preferences
model UserPreferences {
  id              String   @id @default(cuid())
  userId          String   @unique
  currencyCode    String   @default("USD")
  language        String   @default("en")
  notifications   Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Address model
model Address {
  id        String   @id @default(cuid())
  userId    String
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
}

// Category model
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]
}

// Product model
model Product {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  description  String   @db.Text
  price        Float
  comparePrice Float?
  sku          String   @unique
  inventory    Int      @default(0)
  images       String[]
  categoryId   String
  vendorId     String?
  featured     Boolean  @default(false)
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  category   Category     @relation(fields: [categoryId], references: [id])
  vendor     Vendor?      @relation(fields: [vendorId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    Review[]
  wishlist   Wishlist[]
}

// Cart model
model Cart {
  id        String     @id @default(cuid())
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]
}

// CartItem model
model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

// Order model
model Order {
  id                String      @id @default(cuid())
  userId            String
  vendorId          String?
  orderNumber       String      @unique
  status            OrderStatus @default(PENDING)
  subtotal          Float
  tax               Float
  shipping          Float
  total             Float
  currencyCode      String      @default("USD")
  shippingAddressId String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  user            User        @relation(fields: [userId], references: [id])
  vendor          Vendor?     @relation(fields: [vendorId], references: [id])
  shippingAddress Address     @relation(fields: [shippingAddressId], references: [id])
  items           OrderItem[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// OrderItem model
model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  price       Float
  productName String
  createdAt   DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

// Review model
model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int
  comment   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
}

// Wishlist model
model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

// Loyalty Program models
model LoyaltyAccount {
  id              String   @id @default(cuid())
  userId          String   @unique
  points          Int      @default(0)
  totalEarned     Int      @default(0)
  totalRedeemed   Int      @default(0)
  tier            LoyaltyTier @default(BRONZE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    LoyaltyTransaction[]
}

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

model LoyaltyTransaction {
  id          String              @id @default(cuid())
  userId      String
  accountId   String
  type        LoyaltyTransactionType
  points      Int
  description String
  orderId     String?
  createdAt   DateTime            @default(now())

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  account LoyaltyAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

enum LoyaltyTransactionType {
  EARNED
  REDEEMED
  EXPIRED
  BONUS
}

// Gift Card model
model GiftCard {
  id          String          @id @default(cuid())
  code        String          @unique
  amount      Float
  balance     Float
  status      GiftCardStatus  @default(ACTIVE)
  purchasedBy String?
  createdAt   DateTime        @default(now())
  expiresAt   DateTime?

  transactions GiftCardTransaction[]
}

enum GiftCardStatus {
  ACTIVE
  USED
  EXPIRED
  CANCELLED
}

model GiftCardTransaction {
  id         String   @id @default(cuid())
  cardId     String
  orderId    String?
  amount     Float
  type       String
  createdAt  DateTime @default(now())

  card GiftCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

// Chat/Support System
model Message {
  id          String      @id @default(cuid())
  userId      String?
  role        MessageRole
  content     String      @db.Text
  conversationId String?
  isRead      Boolean     @default(false)
  createdAt   DateTime    @default(now())

  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

